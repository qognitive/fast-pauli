[build-system]
requires = [
  # scikit-build-core uses cmake as needed (do not list it here)
  "scikit-build-core",
]
build-backend = "scikit_build_core.build"


[project]
name = "fast_pauli"
readme = "README.md"
description = "fast pauli"
authors = [
  { name="James. E. T. Smith", email="james.smith@qognitive.io" },
  { name="Eugene Rublenko", email="eugene.rublenko@qognitive.io" },
]
dependencies = [
  "numpy",
  "scipy",
]
# dynamic = ["version"]
version = "0.0.1"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]


[project.optional-dependencies]
dev = [
  "clang-format",
  "cmake-format",
  "pre-commit",
  "build",
  "mypy",
  "ruff",
  "pytest",
  "pytest-benchmark",
  "setuptools_scm[toml]>=8",
  "sphinx",
  "sphinx_rtd_theme",
  "sphinx-autobuild",
]
examples = [
]

[tool.setuptools]
packages = ["fast_pauli", "fast_pauli.pypauli"]

[tool.setuptools.package-dir]
fast_pauli = "fast_pauli"
"fast_pauli.pypauli" = "fast_pauli/py/pypauli"

[tool.setuptools_scm]
version_file = "fast_pauli/__version__.py"

[tool.mypy]
warn_redundant_casts = true
warn_unused_ignores = true

# Needed because of bug in MyPy
disallow_subclassing_any = false

mypy_path = "stubs"

disallow_untyped_calls = true
disallow_untyped_defs = true
check_untyped_defs = true
warn_return_any = true
no_implicit_optional = true
strict_optional = true
ignore_missing_imports = true
explicit_package_bases = true

exclude = []

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    ".venv",
    "fast_pauli/__version__.py",
    "nanobind_test"
]

line-length = 88
indent-width = 4

target-version="py38"

[tool.ruff.lint]

# Ruff Rules https://docs.astral.sh/ruff/rules/
# F - PyFlakes (https://docs.astral.sh/ruff/rules/#pyflakes-f)
# E, W - pycodestyle (https://docs.astral.sh/ruff/rules/#pycodestyle-e-w)
# I  - Isort (https://docs.astral.sh/ruff/rules/#isort-i)
# N - PEP-8 Naming (https://docs.astral.sh/ruff/rules/#pep8-naming-n)
# D - pydocstyle (https://docs.astral.sh/ruff/rules/#pydocstyle-d)
# YTT - flake8-2020 (https://docs.astral.sh/ruff/rules/#flake8-2020-ytt)
# ASYNC flake8-async (https://docs.astral.sh/ruff/rules/#flake8-async-async)
# B flake8-bugbear (https://docs.astral.sh/ruff/rules/#flake8-bugbear-b)
# UP flake8-bandit (https://docs.astral.sh/ruff/rules/#flake8-bandit-up)
# SIM flake8-simplify (https://docs.astral.sh/ruff/rules/#flake8-simplify-sim)

select = ["F", "E", "W", "I", "N", "D", "YTT", "ASYNC", "B", "UP", "SIM",]

ignore = [
  # Allow non-lowercase variable names to help the code match the math better
  "N806",
  # mypy doesn't support PEP695 (upgrading to `type` python keyword)
  "UP040",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true


# https://scikit-build-core.readthedocs.io/en/latest/#configuration
# Example: use LLVM
#  pip install -e . --verbose -C cmake.args="-DCMAKE_CXX_COMPILER=clang++-18"
[tool.scikit-build]
cmake.build-type = "Release"
# TODO add more options here
